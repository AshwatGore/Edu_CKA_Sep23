

Lab Requirements :::

Create :::

	1. github 					https://github.com/
	2. Docker Registry			https://hub.docker.com/
	3. AWS Free Tier Account 	https://portal.aws.amazon.com/billing/signup#/start/email
				- Valide Email ID
				- Credit/Debit Card(International Transaction)
				- Mobile Number
	
			VMs....


	Kubernetes is a Open Source Container Orchestration Tool.
	
	Managed Services :
	
		AWS			ECS,ECR,EKS
		Azure		ACS,ACR,AKS
		GCP 		GCS,GCR,GKS
	
	We are gng to work with open source Kubernetes.
	
	

**************************
Day - 1 - 23rd Sep. 2023
**************************

		Introduction to Kubernetes :::
		
		
		Docker 
		
		Linux 
		
		
Lab Requirements :::

Create :::

	1. github 					https://github.com/
	2. Docker Registry			https://hub.docker.com/
	3. AWS Free Tier Account 	https://portal.aws.amazon.com/billing/signup#/start/email
				- Valide Email ID
				- Credit/Debit Card(International Transaction)
				- Mobile Number
	
			VMs....

	Kubernetes is a Open Source Container Orchestration Tool.
	
	DevOps and its Stages :::
	
		Containers ???
		
		Virtual Machines ???
		
	Devops :::
	
		Is a software development strategy
	
		Development ::
			--> Create the source Code
			--> Build 
					--> It is a process of compiling the source code & Create artifacts (binary - *.war/*.jar/*.dll/*.exec)
					
						mywebapp.war	dependencies!
						tomcat_Server_v8.5 with jdk_Openjdk11
						
						Package : mywebapp_pkg1(mywebapp.war,tomcat_v8.5,Openjdk11)
						
						Application_Image 	: 	It is static file which defines the Application and its dependencies.
												Non-Executable.
											
						Container		 	:	Container is a executable units of Application_Images		
					
		Deployed to higher environments:
			
			Test Environments 
				QA 					mywebapp.war - tomcat_Server_v9 with jdk_Openjdk17
									mywebapp_pkg1
				UAT 
					
			Prod Environment
				PROD Server
				
		
		
		Monolith Application Architecture.
				Tightly coupled
		
		Micro_Service Based
				Loosely coupled
		
		
		E_Commerce Portals :::
		
		www.amazon.com - It is a Web Application.
		
		
		Sign_up			--> Developer - src_Code change 	- Test - Independently deploy the changes to prod
											mywebapp_pkg1 --> 
		Sign_In
		Search
		Add_to_Cart
		Place_the_Order
		Make_Payment
		Confirm_Order
		Track
		
			If this is Monolith Application Architecture, we consider all these as Modules/Functions
		
			In Micro_Service Based Application Architecture, we consider all these as services 
			
			Containerized Applications :::
				It is recommended to have Micro_Service Based Application Architecture
				
			3-tier Application Architecture. 
				Front_end 						User Interface
				Application_Logic
				Back_End(Database)
		
		Sign_up			--> Developer - src_Code change 	- Test - Independently deploy the changes to prod
											mywebapp_pkg1 --> 
							(3 Containers --> C1,C2,C3)			==> deployed these containers in PROD.	

			
			Container Orchestration Tool.
				
				Used to ensure high availability of the containers.
				
				- Replicas of Containers.	 15 C1, 15 C2, 15 c3
				- Load Balancing
				- Auto-Scaling
				
			Kubernetes is one of the Open Source Container Orchestration Tools. 
			
			Docker is containerization Service 
				Docker Swarm - Container Orchestration Tools.
				
				
			Kubernetes is a Open Source Container Orchestration Tool.
			
			Managed Services :
			
				AWS			ECS,ECR,EKS
				Azure		ACS,ACR,AKS
				GCP 		GCS,GCR,GKS		

			
			Continuous Development / Integration / Delivery / Deployment		using Containerized Applications.
			
			Release :::
			
			DevOps ::
			
			CI/CD Pipeline Execution :::
			
			Deployment Workflow :::	This can be automated using Build Orchestration Tool (Jenkins,Az_Pipeline,Gitlab-ci,aws_Code_Pipeline)
			
				Source_Code ==> Source Code Repository (github/gitlab/bitbucket/az_repo/aws_code_commit)
				
				Build ==> 
				
				Create Artifacts (binary - *.war/*.jar/*.dll/*.exec) ==>
				
				Create Container Image ==> 
				
				Publish the Container images to Container Registry (dockerhub,ACR,ECR,GCR)
				
				Deploy the images in target environments(QA/UAT/PROD) using Kubernetes.
					
					Non_Prod Environments								Production Environment
						DEV 
						QA 
						UAT				===>		Pre-Prod/Staging  		===>	PROD 
					
				
				Access:
				
					Create :::

						1. github 					https://github.com/
						2. Docker Registry			https://hub.docker.com/
						3. AWS Free Tier Account 	https://portal.aws.amazon.com/billing/signup#/start/email
									- Valid Email ID
									- Credit/Debit Card(International Transaction)
									- Mobile Number
						4. Create Virtual Machines 
						5. Connect to Virtual Machines 
								- EC2 Connect 
								- Using SSH Clients - MobaXterm/Putty
										https://mobaxterm.mobatek.net/download.html
								- Terminals
					
				Docker Registry :::
				
				
			Intro. to Kubernetes :::
				
				What is Kubernetes?
				Architecture of Kubernetes 
				Installation of Kubernetes
				Kubernetes Concepts / Terminologies 
				Working with Kubernetes
			
			Container Orchestration Tool.
				
				Used to ensure high availability of the containers.
				
				- Replicas of Containers.	 15 C1, 15 C2, 15 c3
				- Load Balancing
				- Auto-Scaling
				
			Kubernetes is one of the Open Source Container Orchestration Tools. 	

			Architecture of Kubernetes ::

					Kubernetes is a Master / Nodes Architecture.
					
					
				Kubernetes_Master :: (VM)					
					Kubernetes_Worker_Node1 (VM)
					Kubernetes_Worker_Node2 (VM)
					
				Kubernetes_Master	
					Kubernetes_Master1 :: (VM)
						Kubernetes_Cluster1:
							Kubernetes_Worker_Node1 (VM)
							Kubernetes_Worker_Node2 (VM)
						Kubernetes_Cluster2:
							Kubernetes_Worker_Node1 (VM)
							Kubernetes_Worker_Node2 (VM)				
					Kubernetes_Master1 :: (VM)
						Kubernetes_Cluster1:
							Kubernetes_Worker_Node1 (VM)
							Kubernetes_Worker_Node2 (VM)
						Kubernetes_Cluster2:
							Kubernetes_Worker_Node1 (VM)
							Kubernetes_Worker_Node2 (VM)

							
					Kubernetes_Master ::
					
						API_Server 
						
						Scheduler 
						
						ETCD 
						
						Controller Manager 
						
					Kubernetes_Worker Nodes ::

						Kubelet 
						
						CRI Container Runtime Interface 
						
						Kube_Proxy
						
						
			Terminologies :::
			
				Images 
				
				Containers 
				
				Container Registry
				
				Repository 
				
				POD 
				
				Kubectl 
				
				Kubeadm 
				
				Kubernetes_Cluster

			Kubernetes Concepts :::
			
				POD 
				
				Kubernetes Controller Objects:
					Replication Controller 
					Replicasets
					Daemonsets 
					Deployments
					
				Networking
				
				Services:
					ClusterIP
					NodePort
					LoadBalancer
					
				Volumes:
					Persistant Volume - PV 
					Persistant Volume Claim - PVC 
					Host Volume 
					Empty Dir 
					Config_Maps 
					Secrets
				
				Security:
				
				Namespace 
				
				Manage the Kubernetes Deployments 	
				
**************************
Day - 2 - 24th Sep. 2023
**************************	
			
			Kubernetes is one of the Open Source Container Orchestration Tools. 	

			Architecture of Kubernetes ::

					Kubernetes is a Master / Nodes Architecture.
					
					
				Kubernetes_Master :: (VM)					
					Kubernetes_Worker_Node1 (VM)
					Kubernetes_Worker_Node2 (VM)	

			Terminologies :::
			
				Images 				==> Just a static file that defines the application artifacts & its Dependencies
				
				Containers 			==> Containers are the executable units of Images.
				
				Container Registry	==> It is used to store & manage the images.	dockerhub
				
				Repository			==> It is a subset of Container Registry. 

				Kubeadm 			==> It is a Command line utility to install and Manage the Kubernetes Master & Nodes.

				Kubectl				==> It is a command line utility used to interact with Kubernetes 
				
				Kubernetes_Cluster	==> It is collection of Kubernetes_Worker_Nodes	
								
				POD 
				
			
			Installation of Kubernetes :::
			
			Pre-Requisites :::
				
					
				Kubernetes_Master :: (VM)					
					Kubernetes_Worker_Node1 (VM)	mywebapp_pkg1
					Kubernetes_Worker_Node2 (VM)	mywebapp_pkg1
					


			About Kubectl
			
			About Pods
				
				
Summary ::::

		Installation & Configuration of Kubernetes Master & Worker Nodes using Kubeadm 
		
		Kubectl 
		
		Pod 
		
		Pod Networking 
				
				
**************************
Day - 3 - 30th Sep. 2023
**************************	

		Working with Kubernetes Core Concepts :::
		
		Namespace ::::
			It is logical partitioning of the the Kubernetes Cluster.
			
		
		POD :::
		
			Create the Pod using kubectl command .
			
			Login to that pod and access the application. 
			
			Sevices - NodePort.
			

			Create the Pod using kubectl command .
			
				Manifest file :::
				 
				 Config file written using *.yaml script.
				 
				 
				Create the Manifest file :::
				
				kubectl command to create the object.
				
				kubectl create -f <file1.yaml>
				
				kubectl get pods 
				
				kubectl describe command 			### This is basically used to analyse the kubernetes objects
			

			Login to that pod and access the application. 
			
				docker exec -it <container_id>			# in Docker.
				
				
				kubectl exec -it  
				
				How to access the web applications running inside the container ???
				
				by using the container port. 
				
				<external_ip>:<hostport_#> 
				
				Port mapping  / port binding in Docker ???
				
				docker run -it -p 8089:8080 tomcat
				
				
				Service : NodePort 
				
			Kubernetes Controller Objects:
				Replication Controller 
				Replicasets
				Daemonsets 
				Deployments	


			Pod --> nginx-pod.


			Kubernetes Controller Objects:				
				Replication Controller  & Replicasets::
					Both are used to run a specific copy of pods at any point of time.
					Replicasets - Is the latest Object which support many features of Kubernetes.
					Replicaset uses ==> Set based operator and equality based operator to identify the object labels.
					Replication Controller ==> Uses only the equality based operator to identify the object labels.
					Scale-Up
					Scale-Down										
				
				replicas 3 --> 
				
			Daemonsets	:::
			
				Daemonset is used to deploy a copy of pod in all the available/set of worker nodes.
				While monitoring the worker_nodes/Applications.
				Logs 
				Reports 
				
			Deployment Object :::
			
			
				*.war ==> MyappImg_v1.0	==> Published to Dockerhub. Kubernetes we deploy this appln.
				*.war ==> MyappImg_v1.1	==> Published to Dockerhub. Kubernetes we deploy this appln.

				
				Deployment Controller Object is used to deploy/upgrade/rollback/scale_up/Scale-Down the pods without any downtime.
				
				Replicas: 100
				
				My_Appln_Pod ::: 100 replicas. MyappImg_v1.0
				
				
				Deployment Strategy ::::
				
				- Rolling Update : 	Is the default deployment strategy in kubernetes deployment
									It is used to perform the deployment without any downtime.
									
									
				
				My_Appln_Pod ::: 100 replicas. MyappImg_v1.0 ==>  upgrade to ==> MyappImg_v1.1
				
				3 copies of pod --- is up and running. MyappImg_v1.0 
				
				update 1 of 3, if it is successful, It go with next
				update 2 of 3 
				update 3 of 3
				
				
**************************
Day - 4 - 1st Oct. 2023
**************************	

				Deployment Controller Object :::
				
				deployment failure ::::
				
					during deployment there will no be any downtime, even if the deployment failed.
				
				Volumes:
					Persistant Volume - PV 
					Persistant Volume Claim - PVC 
					Hostpath Volume 
					Empty Dir 
					Config_Maps 
					Secrets
					
					
				Container Volumes ::::
				
				Container Volume ::::
				
					Stateless Applications :
						Applications that will never have the trace of execution.
					
					Stateful Applications :
						Applications that leaves the trace of execution in the form of logs, reports, any outfiles.
						Also, this might expect inputs from external applications
					
					3-tier Application :::
					
					E_Commerce 
					
						sign-in ==> micro-service ==> 
										Front_end				c1/pod
										Application_Logic		c2/pod
										Back_End (Database)		c3/pod
										
					
				Kubernetes :::
				
					Volumes :::
						Persistant Volume - PV 
						Persistant Volume Claim - PVC 
						Host Volume 
						Empty Dir 
						Config_Maps 
						Secrets
						
				
					Config_Maps :::
					
						Application Pod :::
						
							need some input --> can be passed in the form of input files.
							
							The volumes that are needed to any pod, should be created at cluster level.
							
						KMaster 
							KWN1,2,3,4,5,6
							
						
					
					Secrets
					
					
					Deploy an application in QA Environment ==> 
					
							application.config.properties_qa
							application.config.properties_uat
							application.config.properties_prod
							
					Application Image::
					
					
					1. Create a config file 
					2. Create a config_map using tis file.
					3. Create pod by attaching this config map
					
					
					Config_Maps (vs) Secret
					
						- Config_Maps volumes are used to send the general inputs to the pod
						- Secret volumes are used to send the sensitive inputs to the pod
					
					Persistant Volume - PV 
					Persistant Volume Claim - PVC 
					Host Volume 
					
					
					Volume ==> it is just a directory(files)
					
					Pod ==> Application ==> generate some output files ==> 2GB of volume 
					
					Storage Administrator /Infra-Team :::

					Persistant Volume - PV 
					
					Persistant Volume Claim - PVC 
					
							Static / Dynamic --> 
							

					Host Volume  ==> 

						Pod = deployed in a worknode!
						
						Host volumes are created in the host machine.
						
				
				Namespace :::
				
					- It is a logical partitioning of Kubernetes Cluster.
					
					kubectl get ns
					
					kubectl create ns <ns_name>
					
					
				Kubernetes_Master					# Non-Prod
					WN1,WN2,WN3,WN4,WN5				# DEV/QA/UAT


				Kubernetes_Master	
					Kubernetes_Master					# Production
						WN1,WN2,WN3,WN4,WN5					# Active Prod_NS1 / Prod_NS2(Active)




				
**************************
Day - 6 - 7th Oct. 2023
**************************	

			Kubernetes Services :::
			
			
			Pod ==> IP Address .
			
			Internal or External ==
			
			3 - tier Application Architecture -
			 
			Front_end --	p1,2,3   service - nodeport service
			
			Application_Logic -- p1,2,3
			
			Backend -- p1,2,3
			
			
			ClusterIP Service			==> It is used to access the pods internally.
			
			NodePort  Service			==> Is used to expose the pods to internet.
			
			LoadBalancer ;;;
			
				www.gmail.com 		==> Load Balancer 
				
				www.gmail.com/inbox 
				www.gmail.com/spam
				www.gmail.com/trash 
				www.gmail.com/draft
				
			Non-Prod			Prod 
			
			kubectl create -f nginx-deploy.yaml 

			kubectl apply -f nginx-deploy.yaml 


				INGRESS Controller 
				
			
			www.google.com 
			
			www.drive.google.com 
			www.maps.google.com 
			www.gmail.com
				www.gmail.com/inbox 
				www.gmail.com/spam
				www.gmail.com/trash 
				www.gmail.com/draft			
			
			
	
RBAC 

HELM CHARTS 

	--> Default Package Manager for Kubernetes

	yum 
	apt 	-- > node level
	dnf 
	
Dashboards --> 


Monitoring/Trouble shooting Kubernetes 

cicd pipeline 

API Server
			

#################
14th Oct. 2023
#################

			-- Securing Kubernetes 
			
			-- Monitoring and logs 
			
			-- trouble shooting
			
			-- Scheduler
			
			-- CICD -- Integration of Kubernetes in Jenkins CI/CD - Demo
			
			
			
		Security ::::
		
			- Security Architecture :::
			
				- Components / process.
				
				
			In Kubernetes Architecture :::
			
				-- API Server ???
					- Namespace
						- kube-system 
							api,etcd, 
						
						
					- Clusterlevel 
					
					RBAC -->
					
					
				kubectl ==> adhoc / manifest - *.yaml
				
			apiversion: <group_name>/<version>	
				
			apiversion: v1
			kind: pod
			
			apiversion: apps/v1
			kind: deployment 
			
			RoleBinding ::
				usergroup
				service_account

				Handling individual users is not recommended in real time.
				
			Roles & Responsibilites of Kubernetes Administrator ::::
			
				-- Installation & Config
				-- Cluster management 
				-- CERT, User access - RBAC 
				-- Daemonsets ==> used to deploy a copy of pod in all the nodes.
				
						AppTeam1 ==> CLuster :::
								Pod is deployed !
								
					
			Ubuntu :
			
				root ==> Admin.
				ubuntu ==> regular user 
				devopsadmin ==> regular


TroubleShooting!

			--> Cluster - Nodes
			--> Pods 			==> 
			--> Namespaces 
			--> Services 


			CICD Pipeline ::::
								:v1.1		webapp:v1.2
			Application_build ==> Docker_Build ==> Publish Images to DockerHub ==> Deployed in Kubernetes (Cluster_Level/Namespace_Level) 
														
															QA Environment(webapp:v1.2)
															
															
			docker run -it 	webapp:v1 
							webapp:v2
							webapp:latest 
							
							
			"docker build -t webapp:v{BUILD_NUMBER} ."
			
			github 		==> Used to version controll src_Code.
			
			Artifactory Library ==> Jfrog Artifactory ==> Used to version the Snapshots of Application Artifacts *.war / *.jar
			
			docker hub 	==> Used to maintain the various versions of Application Images. 
			
			
			Deployment Object :::
			
			Pods --> 
			
				10 Replicas.
				
				replicas=5
				
			Using Label and selectors we verify the association of deployments and services 
			
			Self-Healing !!!!
			
			
				Deployment Controller Object :::
			
				replicas == 3
				
				1(1),2(2) ==> 
				
				100 Nodes :::
				
					50 Pod instances 2pods
					
				kubectl get pods -n kube-system :
					list of pods running in kube-system.
					
						api			VM(Master Node)
						etcd 
						con 
						sche
						kubeproxy
						
					kubectl describe pods <api_>
			
				Kubelet ???
				
				kubectl get pods 
				
				cd /var/log
				ls
				kube-apiserver_log
				
				cat var/log/kube-apiserver_log
				systemctl status kubelet
				
				systemctl start kubelet 
				
				systemctl restart kubelet 
				
				systemctl enable kubelet 
				
				KMaster1 
					Master.
						K_Master 		(Down due to some reason)
							WN1,2,3,4,5,.....,100	--> Monitoring these nodes for its usage.
								<30%
							
							200+ pods 
							
							
				Self-Healing ::
				
					Deployment 
				
				
				Monitoring Tools --> Dynatrace/DataDog/Prometheus/Nagios
				Logging Tools
				80% 
						
						K_Master 		(Down due to some reason)
							WN1,2,3,4,5 
							
							200+ pods 	
							
							
				CRI --> ContainerD
				
				docker 
				ContainerD
				Kubelet 
				api-server
				
				systemctl status ContainerD
							
				
				
			-- Scheduler
				
					K_Master 		(Down due to some reason)
							WN1,2,3,4,5,.....,100		

				Node Selector ::::
				
			


#################
15th Oct. 2023
#################

		 ==> Kubernetes Dashboards 
		 
		 ==> CICD 
		 
		HELM ==> Package Manager for Kubernetes 
		
			yum/apt/dnf				==> node Level		--> Assign Label
			
			Tools ==> 				==> Cluster_level	
			
			Pod Daemonset			==> Cluster Level / Sub-Set
			

		Kubernetes - Open Source 
		
		Managed Services - EKS --> Dashboards
		kubectl == eksctl
		
		HELM ==> Package Manager for Kubernetes :::
		
			- Install HELM.
			- Using HELM we can install any kubernetes packages.
			- HELM-Chart = Repository 
		
			--> Create Service Account 
			--> ClusterRoleBinding
			--> Token
			
			https://35.154.213.255:32760/
			
			kubectl apply -f <file.yaml>


		Prometheus -> Monitoring Tool 
			Time Series Database 
			PV 
		Prometheus Acts as a Data Source to Grafana == Grafana --> Visualization Tool 
		
		Dynatrace 
		DataDog 
		
		Namespaces :::
		
			Environment - QA / DEV / UAT / PROD 
			
			Application level - pod -- Appteam - 
			
			Deployment :
			
				Blue Green Deployments ;;
		
		
		
		CICD Pipeline :::
		
		Application Onboarding !!!
		
		Build 
		
		Automated Build and deployments ::::
		
			How to integrate Kubernetes with any build orchestration Tool :
			
				Jenkins 
				
				Gitlab-ci 
				Az_pipeline 
				AWS_CodePipeline 
			
			
			Jenkins ::
				Pipeline : Declarative Pipeline :
				
					Stages ::
					
					Execution Flow :::
					
						1. Developers -- Create the source code.
						2. Commit the changes to src code repo. (github)
						
					DevOps Automation starts ::
					Jenkins_Master	
						Jenkin_Build_Server(Slavenode1) 
						Jenkin_Build_Server(Slavenode2) 
							1. SCM_Checkout
							2. Application Build & Create Artifacts 
							3. Docker Build Image
							4. Publish the Image to Docker Hub(Container Registry)
							5. Deploy the images in Kubernetes
							


user add devopsadmin
ssh-keygen

					
pipeline {

    agent { label 'slave1' }
	
    tools {
        maven "maven-3.6.3"
    }

	environment {	
		DOCKERHUB_CREDENTIALS=credentials('dockerloginid')
	}
	
    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/LoksaiETA/devops-java-webapp.git'
            }
        }
        stage('Application_Build') {
            steps {
                echo 'Perform Maven Build'
				sh 'mvn -Dmaven.test.failure.ignore=true clean package'
            }
			  post {
				failure {
				  sh "echo 'Send mail on failure'"
				  mail to:"loksaieta223@gmail.com", from: 'loksaieta223@gmail.com', subject:"FAILURE: ${currentBuild.fullDisplayName}", body: "Build failed."
				}
			  }
        }
        stage('Build Docker Image') {
            steps {
				sh 'docker version'
				sh "docker build -t loksaieta/loksai-eta-app:${BUILD_NUMBER} ."
				sh 'docker image list'
				sh "docker tag loksaieta/loksai-eta-app:${BUILD_NUMBER} loksaieta/loksai-eta-app:latest"
            }
        }
		stage('Login2DockerHub') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}
		stage('Publish_to_Docker_Registry') {
			steps {
				sh "docker push loksaieta/loksai-eta-app:latest"
			}
		}
        stage('Approve - Deployment'){
            steps{
                
                //----------------send an approval prompt-------------
                script {
                   env.APPROVED_DEPLOY = input message: 'User input required Choose "Yes" | "Abort"'
                       }
                //-----------------end approval prompt------------
            }
        }
		stage('Deploy to Kubernetes_Cluster') {
			steps {
				script {
					sshPublisher(publishers: [sshPublisherDesc(configName: 'Kubernetes', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'kubectl apply -f k8smvndeployment.yaml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])	
				}
			}
		}
    }
}			
		
sshPublisher(publishers: [sshPublisherDesc(configName: 'Kubernetes', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'kubectl apply -f k8smvndeployment.yaml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])


https://3.110.169.127:30442/


DevOps ::


		Linux OS -- shell scripts/groovy/yaml/python scripts 
		
		Jenkins --> master_slave, create CICD, handling remote servers
		
		gitlab-ci 
		
		az-pipeline 
		
		Ansible 


			
				
				
